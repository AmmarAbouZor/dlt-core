# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc cb400e2bb0ea5339e3401b54cf992082a5b0eb4ca7bbab0ce42fb011ad77340f # shrinks to msg = Message { storage_header: None, header: StandardHeader { has_extended_header: true, version: 0, big_endian: false, message_counter: 0, overall_length: 19, ecu_id: Some("aa"), session_id: None, timestamp: None }, extended_header: Some(ExtendedHeader { verbose: false, argument_count: 0, message_type: Unknown((4, 4)), application_id: "ELG", context_id: "WB" }), payload: ControlMsg(0, []), fibex_metadata: None }
cc b98474818bedf440f5465c949fa034f527c0d50c92a51f6ec1d05026043daf51 # shrinks to msg = Message { storage_header: None, header: StandardHeader { has_extended_header: true, version: 0, big_endian: false, message_counter: 0, overall_length: 29, ecu_id: Some("aa"), session_id: None, timestamp: None }, extended_header: Some(ExtendedHeader { verbose: false, argument_count: 0, message_type: Control(Unknown(3)), application_id: "a", context_id: "D" }), payload: ControlMsg(Unknown(3), [112, 130, 98, 90, 65, 208, 135, 109, 190, 8]), fibex_metadata: None }
cc 38c0f94fe62481200c1ff98da50ed6bb2cb9bfde1577c2c8a7d1c750bc7fac4c # shrinks to msg = Message { storage_header: None, header: StandardHeader { has_extended_header: true, version: 0, big_endian: false, message_counter: 0, overall_length: 22, ecu_id: Some("Aa"), session_id: None, timestamp: None }, extended_header: Some(ExtendedHeader { verbose: false, argument_count: 0, message_type: Control(Request), application_id: "a", context_id: "A" }), payload: NonVerbose(0, []), fibex_metadata: None }
cc e846162127873f6ce5a3150d190c7e7eb37fdf949a1d0fa9626ff2143096d458 # shrinks to msg = Message { storage_header: None, header: StandardHeader { has_extended_header: true, version: 0, big_endian: false, message_counter: 0, overall_length: 22, ecu_id: Some("aA"), session_id: None, timestamp: None }, extended_header: Some(ExtendedHeader { verbose: true, argument_count: 1, message_type: Log(Warn), application_id: "pg", context_id: "VTx" }), payload: Verbose([Argument { type_info: TypeInfo { kind: Signed(BitLength32, true), coding: UTF8, has_variable_info: false, has_trace_info: false }, name: None, unit: None, fixed_point: None, value: U32(448425014) }]), fibex_metadata: None }
cc 95c2f83be74dd74e57c760469b897612a457d5082c758d34df9c56f7e2371e79 # shrinks to msg = Message { storage_header: None, header: StandardHeader { has_extended_header: true, version: 0, big_endian: false, message_counter: 0, overall_length: 23, ecu_id: Some("aa"), session_id: None, timestamp: None }, extended_header: Some(ExtendedHeader { verbose: true, argument_count: 1, message_type: Log(Warn), application_id: "uwk", context_id: "qpa" }), payload: Verbose([Argument { type_info: TypeInfo { kind: Bool, coding: UTF8, has_variable_info: true, has_trace_info: false }, name: None, unit: None, fixed_point: None, value: U8(196) }]), fibex_metadata: None }
cc 5568c1a9c464d938ff6ba950b5a64208fd15cc580607fff5a23ee813362d0bd6 # shrinks to msg = Message { storage_header: None, header: StandardHeader { version: 0, endianness: Little, has_extended_header: true, message_counter: 0, ecu_id: Some("Aa"), session_id: None, timestamp: None, payload_length: 11 }, extended_header: Some(ExtendedHeader { verbose: true, argument_count: 1, message_type: Log(Warn), application_id: "qQ", context_id: "lZ" }), payload: Payload2 { payload_content: Verbose([Argument { type_info: TypeInfo { kind: Bool, coding: UTF8, has_variable_info: true, has_trace_info: false }, name: Some("ctH"), unit: Some("seconds"), fixed_point: None, value: Bool(false) }]) }, fibex_metadata: None }
cc a95ec4c6022caae1a54a7015a825c11bcc3724b757768f866627a0595ed54694 # shrinks to arg = Argument { type_info: TypeInfo { kind: UnsignedFixedPoint(Width32), coding: ASCII, has_variable_info: false, has_trace_info: false }, name: None, unit: None, fixed_point: Some(FixedPoint { quantization: 0.0, offset: I32(0) }), value: U32(0) }, endianness = Little
